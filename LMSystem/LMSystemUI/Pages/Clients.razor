@page "/clients"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IMongoClientData clientData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage


<h1 class="page-heading text-uppercase mb-4">Clients:</h1>
<div class="description-and-search-bar">
    <input type="text" placeholder="Search Clients" size="50"
           aria-label="Search box"
           @oninput="((txt) => OnSearchInput((string)txt.Value))" />
    <div>
        <button class="btn btn-primary" @onclick="CreateNewItem">Create New Client</button>
    </div>
</div>
<div class="result"> 
    <div>
        @if(clients is not null)
            {
                <Virtualize Items="@clients" Context="s" OverscanCount="15">
                    <form class="result-card">
                        <fieldset>
                            <div @onclick="(() => OpenClientDetails(s))">Name: <a class="card-link">@s.LastName, @s.FirstName</a></div>
                            <div>Cell: @s.ClientPhoneNumber</div>
                        </fieldset>
                    </form>
                </Virtualize>
            }
    </div>
</div>


@code {
    private List<ClientModel> clients;
    private string searchText = "";

    protected async override Task OnInitializedAsync()
    {
        clients = await clientData.GetClientsAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await LoadFilterState();
            await FilterClients();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        searchText = "";

    }

    private async Task FilterClients()
    {
        var output = await clientData.GetClientsAsync();
        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(s => s.FirstName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.LastName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ClientPhoneNumber.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ClientEMail.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ClientAddress.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        clients = output;

        await SaveFilterState();
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterClients();
    }

    private void OpenClientDetails(ClientModel client)
    {
        navManager.NavigateTo($"/client/{client.Id}");
    }

    private void CreateNewItem()
    {
        navManager.NavigateTo("/createclient");
    }
}


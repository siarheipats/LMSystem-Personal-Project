@page "/invoice/{id}"

@inject IMongoInvoiceData invoiceData
@inject NavigationManager navManager
@inject IJSRuntime JS
@inject IToastService toastService

<h1 class="page-heading text-uppercase mb-4">Invoice Details:</h1>
@if (invoice is not null)
{
    <h2 class="page-heading">Title: @invoice.InvoiceTitle</h2>
    <div class="element-details">
        <div>Invoice #: @invoice.InvoiceNumber</div>
        <div>Status: @invoice.InvoiceStatus</div>
        <div>Created: @invoice.DateCreated.ToString("MM.dd.yyyy")</div>
        <div>Created By: @invoice.CreatedBy.FirstName @invoice.CreatedBy.LastName</div>
        <br />
        <div>Total: $@invoice.Total</div>
        <div><h3 class="details-heading">Items:</h3></div>
        <button @onclick="(() => AddItemsToInvoice(invoice.Id))">Add Items</button>
        <br />
        @if (invoice.Items is not null)
        {
            <br />
            <div class="table">
                <table class="invoice-items-table">
                    <thead class="table-header">
                        <tr>
                            <th>Item Name</th>
                            <th>Item Price</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        <Virtualize Items="@invoice.Items" Context="s" OverscanCount="5">
                            <tr>
                                <td>@s.ItemName</td>
                                <td>@s.Price</td>
                                <td class="table-button"><button class="btn btn-danger" data-toggle="modal" data-target="#exampleModalCenter" @onclick='eventArgs => { ShowModal("exampleModalCenter"); ItemToRemoveUpdate(s); }'>Remove</button></td>
                            </tr>
                        </Virtualize>
                    </tbody>
                </table>
                <br />
                <div>Total: $@invoice.Total</div>
            </div>
        }
        @if (invoice.Items is null)
        {
            <br />
            <div> No items in the invoice</div>
        }
    </div>
}


<!-- Modal -->
<div class="modal fade show" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="display:none; background: 00000080;">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title-2" color: #282c34 id="exampleModalLongTitle">Warning</h5>
                <button @onclick='eventArgs => HideModal("exampleModalCenter")' type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p class="modal-mine">Are you sure you want to remove this item?</p>
            </div>
            <div class="modal-footer">
                <button type="button" @onclick='eventArgs => HideModal("exampleModalCenter")' class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick='eventArgs => { HideModal("exampleModalCenter"); ConfirmRemove(); }'>Remove</button>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public string Id { get; set; }
    private InvoiceModel invoice;
    private ItemModel itemToRemove = new();

    private bool DeleteDialogOpen { get; set; }

    protected override async Task OnInitializedAsync()
    {
        invoice = await invoiceData.GetInvoiceAsync(Id);
    }

    private void AddItemsToInvoice(string id)
    {
        navManager.NavigateTo($"/additemstoinvoice/{id}");
    }


    private IJSObjectReference module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == null)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/InvoiceDetails.razor.js");
        }
    }

    protected async void ShowModal(string elementId)
    {
        if (module != null)
        {
            await module.InvokeAsync<string>("showModal", elementId);
        }
        else
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/InvoiceDetails.razor.js");
            await module.InvokeAsync<string>("showModal", elementId);
        }
    }

    protected async void HideModal(string elementId)
    {
        if (module != null)
        {
            await module.InvokeAsync<string>("hideModal", elementId);
        }
        else
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/InvoiceDetails.razor.js");
            await module.InvokeAsync<string>("hideModal", elementId);
        }
    }

    private void ItemToRemoveUpdate(ItemModel item)
    {
        itemToRemove = item;
    }

    private void ConfirmRemove()
    {
        toastService.ShowWarning($"{itemToRemove.ItemName} was removed!");
    }
}


@page "/addinvoicetoproject/{id}"

@inject IMongoProjectData projectData
@inject IMongoInvoiceData invoiceData
@inject NavigationManager navManager
@inject IToastService toastService

<h1 class="page-heading text-uppercase mb-4">Add Invoice for @project.ProjectTitle:</h1>

<button class="btn btn-warning" @onclick="(() => ClosePage())">Close Page</button>
<br />
<div class="description-and-search-bar">
    <input type="text" size="50" placeholder="Search All Invoices"
           aria-label="Search box"
           @oninput="((txt) => OnSearchInput((string)txt.Value))" />
</div>
<div class="result">
    <div>
        @if (invoices is not null)
        {
            <Virtualize Items="invoices" Context="s" OverscanCount="10">
                <form class="result-card">
                    <fieldset>
                        <div>Title: @s.InvoiceTitle</div>
                        <div>Invoice Number: @s.InvoiceNumber</div>
                        <div>Status: @s.InvoiceStatus</div>
                        <div>
                            <button type="button" class="btn btn-primary" @onclick="@(() => { AddInvoice(s); toastService.ShowSuccess($"{s.InvoiceTitle} was assigned to {project.ProjectTitle}!"); })">Add Invoice</button>
                        </div>
                    </fieldset>
                </form>
            </Virtualize>
        }
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    private List<InvoiceModel> invoices;
    private ProjectModel project = new();
    private string searchText = "";

    protected async override Task OnInitializedAsync()
    {
        project = await projectData.GetPorjectAsync(Id);
        invoices = await invoiceData.GetAllInvoices();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await LoadFilterState();
            await FilterInvoices();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        searchText = "";

    }

    private async Task FilterInvoices()
    {
        var output = await invoiceData.GetAllInvoices();
        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(s => s.InvoiceTitle.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
            s.InvoiceNumber.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        invoices = output;

    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterInvoices();
    }

    private async Task AddInvoice(InvoiceModel invoice)
    {
        project.Invoices.Add(invoice);
        await projectData.UpdateProject(project);
        ClosePage();
    }

    private void ClosePage()
    {
        navManager.NavigateTo($"/project/{Id}");
    }
}


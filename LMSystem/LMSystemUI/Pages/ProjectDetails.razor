@page "/project/{id}"

@inject IMongoProjectData projectData
@inject NavigationManager navManager
@inject IMongoInvoiceData invoiceData

@inject IToastService toastService
@inject IJSRuntime JS


<h1 class="page-heading text-uppercase mb-4">Project Details</h1>
<div class="element-details">
    @if (project is not null)
    {
        @if (currentProjectTitle == project.Id)
        {
            <EditForm class="edit-element-details" Model="@editedProjectTitle" OnSubmit="(() => SaveTitle(project))">
                New Project Title: <InputText size="100" @bind-Value="editedProjectTitle" />
                <br />
                <button class="edit-element-button" type="submit">
                    <span class="oi oi-check" @onclick="@(() => toastService.ShowSuccess("Title was updated!"))"></span>
                </button>
                <button class="edit-element-button" @onclick="(() => currentProjectTitle = String.Empty)">
                    <span class="oi oi-x"></span>
                </button>
            </EditForm>
        }
        else
        {
            <h2 class="details-heading">Title: @project.ProjectTitle</h2>
            <button type="button" class="btn btn-info" @onclick="(() => EditTitle(project))">Edit Project Title</button>
            <button type="button" class="btn btn-info" @onclick="(() => ShareProject(project))">Share Project</button>
            <button type="button" class="btn btn-danger" ata-toggle="modal" data-target="#exampleModalCenter" @onclick='eventArgs => { ShowModal("exampleModalCenter"); ProjectToRemoveUpdate(project); }'>Delete Project</button>
        }

        @if (currentProjectLink == project.Id)
        {
            <EditForm class="edit-element-details" Model="@editingProjectLink">
                <br />
                Share Project with @project.ProjectClient.FirstName @project.ProjectClient.LastName
                <br />
                <br />
                Send to: @project.ProjectClient.ClientEMail
                <br />
                <br />
                <InputTextArea @bind-Value="editingProjectLink" rows="5" cols="75" />
                <br />
                <button type="button" class="btn btn-primary" @onclick="(() => SendEmail())">Send</button>
            </EditForm>
        }

        @if (project.ProjectClient.Id is null)
        {
            <h4 class="details-heading">Client Information: </h4>
            <button class="btn btn-info" @onclick="(()=> AddClientToProject(project.Id))">Add Client</button>
            <br />
        }
        else
        {
            <h4 class="details-heading">Client Information: </h4>
            <div>Address: @project.ProjectClient.ClientAddress</div>
            <div>Client: @project.ProjectClient.FirstName @project.ProjectClient.LastName</div>
            <div>Cell: @project.ProjectClient.ClientPhoneNumber</div>
        }
        <br />
        @if (currentProjectStatus == project.Id)
        {
            <EditForm class="edit-element-template" Model="@editedProjectStatus" OnSubmit="(() => SaveStatus(project))">
                Project Status: <InputText @bind-Value="editedProjectStatus" />
                <br />
                <button class="edit-element-button" type="submit">
                    <span class="oi oi-check" @onclick="@(() => toastService.ShowSuccess("Project status was updated!"))"></span>
                </button>
                <button class="edit-element-button" @onclick="(() => currentProjectStatus = String.Empty)">
                    <span class="oi oi-x"></span>
                </button>
            </EditForm>
        }
        else
        {
            <div>Status: @project.ProjectStatus <span class="oi oi-pencil" @onclick="(() => EditStatus(project))" /></div>
        }
        <br />
        @if (currentProjectDescription == project.Id)
        {
            <EditForm class="edit-element-details" Model="@editedProjectDescription" OnSubmit="(() => SaveDescription(project))">
                Description: <br />
                <InputTextArea @bind-Value="editedProjectDescription" rows="5" cols="75" />
                <br />
                <button class="edit-element-button" type="submit">
                    <span class="oi oi-check" @onclick="@(() => toastService.ShowSuccess("Description was updated!"))"></span>
                </button>
                <button class="edit-element-button" @onclick="(() => currentProjectDescription = String.Empty)">
                    <span class="oi oi-x"></span>
                </button>
            </EditForm>
        }
        else
        {
            <div>Description: @project.ProjectDescription <span class="oi oi-pencil" @onclick="(() => EditDescription(project))" /></div>
        }
        <br />
        @if (currentProjectNotes == project.Id)
        {
            <EditForm class="edit-element-details" Model="@editedProjectNotes" OnSubmit="(() => SaveNotes(project))">
                Notes: <br />
                <InputTextArea @bind-Value="editedProjectNotes" rows="5" cols="75" />
                <br />
                <button class="edit-element-button" type="submit">
                    <span class="oi oi-check" @onclick="@(() => toastService.ShowSuccess("Notes were updated!"))"></span>
                </button>
                <button class="edit-element-button" @onclick="(() => currentProjectNotes = String.Empty)">
                    <span class="oi oi-x"></span>
                </button>
            </EditForm>
        }
        else
        {
            <div>Notes: @project.ProjectNotes <span class="oi oi-pencil" @onclick="(() => EditNotes(project))" /></div>
        }
        <br />
        <div><h5 class="details-heading">Invoices:</h5></div>
        <div>
            <button class="btn btn-primary" @onclick="(()=> AddExistingInvoice(project.Id))">Add Existing Invoice</button>
        </div>
        <br />
        <table class="invoice-items-table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Invoice Status</th>
                    <th>Total</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <Virtualize Items="@project.Invoices" Context="s" OverscanCount="5">
                    <tr>
                        <td>@s.InvoiceTitle</td>
                        <td>@s.InvoiceStatus</td>
                        <td>$@s.Total</td>
                        <td class="table-button"><button type="button" class="btn btn-danger" data-toggle="modal" data-target="#exampleModalCenter" @onclick='eventArgs => { ShowModal("exampleModalCenter2"); InvoiceToRemoveUpdate(s); }'>Remove</button></td>
                    </tr>
                </Virtualize>
            </tbody>
        </table>
    }
</div>

<!-- Modal -->
<div class="modal fade show" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="display:none; background: 00000080;">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title-2" color: #282c34 id="exampleModalLongTitle">Warning</h5>
                <button @onclick='eventArgs => HideModal("exampleModalCenter")' type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p class="modal-mine">Are you sure you want to delete this project?</p>
            </div>
            <div class="modal-footer">
                <button type="button" @onclick='eventArgs => HideModal("exampleModalCenter")' class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick='eventArgs => { HideModal("exampleModalCenter"); ConfirmRemove(); }'>Remove</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal2 -->
<div class="modal fade show" id="exampleModalCenter2" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="display:none; background: 00000080;">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title-2" color: #282c34 id="exampleModalLongTitle">Warning</h5>
                <button @onclick='eventArgs => HideModal("exampleModalCenter")' type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p class="modal-mine">Are you sure you want to remove this invoice?</p>
            </div>
            <div class="modal-footer">
                <button type="button" @onclick='eventArgs => HideModal("exampleModalCenter")' class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick='eventArgs => { HideModal("exampleModalCenter"); ConfirmRemoveInvoice(); }'>Remove</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    private ProjectModel project;

    private ProjectModel editingProjectModel;
    private ProjectModel projectToRemove = new();
    private InvoiceModel invoiceToRemove = new();
    private IJSObjectReference module;

    private string currentProjectTitle = "";
    private string editedProjectTitle = "";
    private string currentProjectStatus = "";
    private string editedProjectStatus = "";
    private string currentProjectDescription = "";
    private string editedProjectDescription = "";
    private string currentProjectNotes = "";
    private string editedProjectNotes = "";
    private string currentProjectLink = "";
    private string editingProjectLink = "";
    private string shareProjectText = "";
    private string shortURL = "";

    protected override async Task OnInitializedAsync()
    {
        project = await projectData.GetPorjectAsync(Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == null)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/ProjectDetails.razor.js");
        }
    }

    protected async void ShowModal(string elementId)
    {
        if (module != null)
        {
            await module.InvokeAsync<string>("showModal", elementId);
        }
        else
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/ProjectDetails.razor.js");
            await module.InvokeAsync<string>("showModal", elementId);
        }
    }

    private void ProjectToRemoveUpdate(ProjectModel project)
    {
        projectToRemove = project;
    }

    private void ConfirmRemove()
    {
        toastService.ShowWarning($"{projectToRemove.ProjectTitle} was deleted!");
        DeleteProject(projectToRemove);
    }

    protected async void HideModal(string elementId)
    {
        if (module != null)
        {
            await module.InvokeAsync<string>("hideModal", elementId);
        }
        else
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/ProjectDetails.razor.js");
            await module.InvokeAsync<string>("hideModal", elementId);
        }
    }

    private void AddClientToProject(string id)
    {
        navManager.NavigateTo($"/addclienttoproject/{id}");
    }

    private void ShareProject(ProjectModel project)
    {
        GenerateLink(project);
        editingProjectModel = project;
        editingProjectLink = $"Hello {project.ProjectClient.FirstName}! You now can access your project and invoices by following this link: {shortURL}";
        currentProjectLink = project.Id;

        currentProjectTitle = "";
        currentProjectStatus = "";
        currentProjectDescription = "";
        currentProjectNotes = "";
    }

    private void EditTitle(ProjectModel project)
    {
        editingProjectModel = project;
        editedProjectTitle = project.ProjectTitle;
        currentProjectTitle = project.Id;

        currentProjectStatus = "";
        currentProjectDescription = "";
        currentProjectNotes = "";
        currentProjectLink = "";
    }

    private async Task SaveTitle(ProjectModel project)
    {
        currentProjectTitle = String.Empty;
        project.ProjectTitle = editedProjectTitle;
        await projectData.UpdateProject(project);
    }

    private void EditStatus(ProjectModel project)
    {
        editingProjectModel = project;
        editedProjectStatus = project.ProjectStatus;
        currentProjectStatus = project.Id;

        currentProjectTitle = "";
        currentProjectDescription = "";
        currentProjectNotes = "";
        currentProjectLink = "";
    }

    private async Task SaveStatus(ProjectModel project)
    {
        currentProjectStatus = String.Empty;
        project.ProjectStatus = editedProjectStatus;
        await projectData.UpdateProject(project);
    }

    private void EditDescription(ProjectModel project)
    {
        editingProjectModel = project;
        editedProjectDescription = project.ProjectDescription;
        currentProjectDescription = project.Id;

        currentProjectTitle = "";
        currentProjectStatus = "";
        currentProjectNotes = "";
        currentProjectLink = "";
    }

    private async Task SaveDescription(ProjectModel project)
    {
        currentProjectDescription = String.Empty;
        project.ProjectDescription = editedProjectDescription;
        await projectData.UpdateProject(project);
    }

    private void EditNotes(ProjectModel project)
    {
        editingProjectModel = project;
        editedProjectNotes = project.ProjectNotes;
        currentProjectNotes = project.Id;

        currentProjectTitle = "";
        currentProjectStatus = "";
        currentProjectDescription = "";
        currentProjectLink = "";
    }

    private async Task SaveNotes(ProjectModel project)
    {
        currentProjectNotes = String.Empty;
        project.ProjectNotes = editedProjectNotes;
        await projectData.UpdateProject(project);
    }

    private void GenerateLink(ProjectModel project)
    {
        string fullURL = $"https://localhost:7012/project/{project.Id}";
        File.WriteAllText(@"/Users/siarheipats/GitHubRepos/LMSystem-Personal-Project/LMSystem/data_xfer.txt", fullURL);
        Thread.Sleep(500);
        shortURL = File.ReadAllText(@"/Users/siarheipats/GitHubRepos/LMSystem-Personal-Project/LMSystem/data_xfer.txt");
        File.WriteAllText(@"/Users/siarheipats/GitHubRepos/LMSystem-Personal-Project/LMSystem/data_xfer.txt", "");
    }

    private void DeleteProject(ProjectModel project)
    {
        projectData.DeleteProject(project);
        navManager.NavigateTo("/projects");
    }

    private void SendEmail()
    {
        toastService.ShowSuccess("Email was sent!");
        currentProjectLink = String.Empty;
    }

    private void AddExistingInvoice(string id)
    {
        navManager.NavigateTo($"/addinvoicetoproject/{id}");
    }

    private void InvoiceToRemoveUpdate(InvoiceModel invoice)
    {
        invoiceToRemove = invoice;
    }

    private async Task ConfirmRemoveInvoice()
    {
        project.Invoices.Remove(invoiceToRemove);
        toastService.ShowWarning($"{invoiceToRemove.InvoiceTitle} was removed!");
        await projectData.UpdateProject(project);
        HideModal("exampleModalCenter2");
    }
}


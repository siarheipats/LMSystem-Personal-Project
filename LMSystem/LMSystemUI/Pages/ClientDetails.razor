@page "/client/{id}"

@inject IMongoClientData clientData
@inject NavigationManager navManager

<h2 class="page-heading">Client Details:</h2>
<div class="element-details">
    @if (client is not null)
    {

        @if (currentFirstName == client.Id || currentLastName == client.Id)
        {
            <EditForm class="edit-element-details" Model="@editedFirstName">
                First Name: <InputText @bind-Value="editedFirstName" />
            </EditForm>
            <EditForm class="edit-element-details" Model="@editedLastName" OnSubmit="(() => SaveName(client))">
                Last Name: <InputText @bind-Value="editedLastName" />
                <br/>
                <button class="edit-element-button" type="submit">
                    <span class="oi oi-check"></span>
                </button>
                <button class="edit-element-button" @onclick="(() => currentFirstName = String.Empty)">
                    <span class="oi oi-x"></span>
                </button>
            </EditForm>
        }
        else
        {
            <div>
                Name: @client.FirstName @client.LastName    <span class="oi oi-pencil" @onclick="(() => EditName(client))" />
            </div>
        }
        <br />
        @if (currentAddress == client.Id)
        {
            <EditForm class="edit-element-details" Model="@editedAddress" OnSubmit="(() => SaveAddress(client))">
                Address: <InputText size="75" @bind-Value="editedAddress" />
                <br/>
                <button class="edit-element-button" type="submit">
                    <span class="oi oi-check"></span>
                </button>
                <button class="edit-element-button" @onclick="(() => currentAddress = String.Empty)">
                    <span class="oi oi-x"></span>
                </button>
            </EditForm>
        }
        else
        {
            <div>
                Address: @client.ClientAddress    <span class="oi oi-pencil" @onclick="(() => EditAddress(client))" />
            </div>
        }
        <br />
        @if (currentPhone == client.Id)
        {
            <EditForm class="edit-element-details" Model="@editedPhone" OnSubmit="(() => SavePhoneNumber(client))">
                Phone: <InputText @bind-Value="editedPhone" />
                <br/>
                <button class="edit-element-button" type="submit">
                    <span class="oi oi-check"></span>
                </button>
                <button class="edit-element-button" @onclick="(() => currentPhone = String.Empty)">
                    <span class="oi oi-x"></span>
                </button>
            </EditForm>
        }
        else
        {
            <div>
                Phone: @client.ClientPhoneNumber <span class="oi oi-pencil" @onclick="(() => EditPhoneNumber(client))" />
            </div>
        }
        <br />
        @if (currentEmail == client.Id)
        {
            <EditForm class="edit-element-details" Model="@editedEmail" OnSubmit="(() => SaveEmail(client))">
                Email: <InputText @bind-Value="editedEmail" />
                <br/>
                <button class="edit-element-button" type="submit">
                    <span class="oi oi-check"></span>
                </button>
                <button class="edit-element-button" @onclick="(() => currentEmail = String.Empty)">
                    <span class="oi oi-x"></span>
                </button>
            </EditForm>
        }
        else
        {
            <div>
                Email: @client.ClientEMail <span class="oi oi-pencil" @onclick="(() => EditEmail(client))" />
            </div>
        }
    }
</div>


@code {
    [Parameter]
    public string Id { get; set; }
    private ClientModel client;

    private ClientModel editingClientModel;
    private string currentFirstName = "";
    private string editedFirstName = "";
    private string currentLastName = "";
    private string editedLastName = "";
    private string currentAddress = "";
    private string editedAddress = "";
    private string currentPhone = "";
    private string editedPhone = "";
    private string currentEmail = "";
    private string editedEmail = "";


    protected override async Task OnInitializedAsync()
    {
        client = await clientData.GeClientAsync(Id);
    }

    private void EditName(ClientModel client)
    {
        editingClientModel = client;
        editedFirstName = client.FirstName;
        editedLastName = client.LastName;
        currentFirstName = client.Id;
        currentLastName = client.Id;

        currentAddress = "";
        currentPhone = "";
        currentEmail = "";
    }

    private void EditAddress(ClientModel client)
    {
        editingClientModel = client;
        editedAddress = client.ClientAddress;
        currentAddress = client.Id;

        currentFirstName = "";
        currentLastName = "";
        currentPhone = "";
        currentEmail = "";
    }

    private void EditPhoneNumber(ClientModel client)
    {
        editingClientModel = client;
        editedPhone = client.ClientPhoneNumber;
        currentPhone = client.Id;

        currentAddress = "";
        currentFirstName = "";
        currentLastName = "";
        currentEmail = "";
    }

    private void EditEmail(ClientModel client)
    {
        editingClientModel = client;
        editedEmail = client.ClientEMail;
        currentEmail = client.Id;

        currentAddress = "";
        currentFirstName = "";
        currentLastName = "";
        currentPhone = "";
    }

    private async Task SaveName(ClientModel client)
    {
        currentFirstName = String.Empty;
        currentLastName = String.Empty;
        client.FirstName = editedFirstName;
        client.LastName = editedLastName;
        await clientData.UpdateClient(client);
    }

    private async Task SaveAddress(ClientModel client)
    {
        currentAddress = String.Empty;
        client.ClientAddress = editedAddress;
        await clientData.UpdateClient(client);
    }

    private async Task SavePhoneNumber(ClientModel client)
    {
        currentPhone = String.Empty;
        client.ClientPhoneNumber = editedPhone;
        await clientData.UpdateClient(client);
    }

    private async Task SaveEmail(ClientModel client)
    {
        currentEmail = String.Empty;
        client.ClientEMail = editedEmail;
        await clientData.UpdateClient(client);
    }
}


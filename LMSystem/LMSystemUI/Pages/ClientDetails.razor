@page "/client/{id}"

@inject IMongoClientData clientData
@inject NavigationManager navManager
@inject IJSRuntime JS
@inject IToastService toastService

<h2 class="page-heading">Client Details:</h2>
<div class="element-details">
    @if (client is not null)
    {

        @if (currentFirstName == client.Id || currentLastName == client.Id)
        {
            <EditForm class="edit-element-details" Model="@editedFirstName">
                First Name: <InputText @bind-Value="editedFirstName" />
            </EditForm>
            <EditForm class="edit-element-details" Model="@editedLastName" OnSubmit="(() => SaveName(client))">
                Last Name: <InputText @bind-Value="editedLastName" />
                <br />
                <button class="edit-element-button" type="submit">
                    <span class="oi oi-check"></span>
                </button>
                <button class="edit-element-button" @onclick="(() => currentFirstName = String.Empty)">
                    <span class="oi oi-x"></span>
                </button>
            </EditForm>
        }
        else
        {
            <div>
                Name: @client.FirstName @client.LastName    <span class="oi oi-pencil" @onclick="(() => EditName(client))" />
            </div>
        }
        <br />
        @if (currentAddress == client.Id)
        {
            <EditForm class="edit-element-details" Model="@editedAddress" OnSubmit="(() => SaveAddress(client))">
                Address: <InputText size="75" @bind-Value="editedAddress" />
                <br />
                <button class="edit-element-button" type="submit">
                    <span class="oi oi-check"></span>
                </button>
                <button class="edit-element-button" @onclick="(() => currentAddress = String.Empty)">
                    <span class="oi oi-x"></span>
                </button>
            </EditForm>
        }
        else
        {
            <div>
                Address: @client.ClientAddress    <span class="oi oi-pencil" @onclick="(() => EditAddress(client))" />
            </div>
        }
        <br />
        @if (currentPhone == client.Id)
        {
            <EditForm class="edit-element-details" Model="@editedPhone" OnSubmit="(() => SavePhoneNumber(client))">
                Phone: <InputText @bind-Value="editedPhone" />
                <br />
                <button class="edit-element-button" type="submit">
                    <span class="oi oi-check"></span>
                </button>
                <button class="edit-element-button" @onclick="(() => currentPhone = String.Empty)">
                    <span class="oi oi-x"></span>
                </button>
            </EditForm>
        }
        else
        {
            <div>
                Phone: @client.ClientPhoneNumber <span class="oi oi-pencil" @onclick="(() => EditPhoneNumber(client))" />
            </div>
        }
        <br />
        @if (currentEmail == client.Id)
        {
            <EditForm class="edit-element-details" Model="@editedEmail" OnSubmit="(() => SaveEmail(client))">
                Email: <InputText @bind-Value="editedEmail" />
                <br />
                <button class="edit-element-button" type="submit">
                    <span class="oi oi-check"></span>
                </button>
                <button class="edit-element-button" @onclick="(() => currentEmail = String.Empty)">
                    <span class="oi oi-x"></span>
                </button>
            </EditForm>
        }
        else
        {
            <div>
                Email: @client.ClientEMail <span class="oi oi-pencil" @onclick="(() => EditEmail(client))" />
            </div>
        }

    }
    <br/>
    <br/>
    <div>
        <button class="btn btn-danger" ata-toggle="modal" data-target="#exampleModalCenter" @onclick='eventArgs => { ShowModal("exampleModalCenter"); ClientToRemoveUpdate(client); }'>Delete Client</button>
    </div>
</div>

<!-- Modal -->
<div class="modal fade show" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="display:none; background: 00000080;">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title-2" color: #282c34 id="exampleModalLongTitle">Warning</h5>
                <button @onclick='eventArgs => HideModal("exampleModalCenter")' type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p class="modal-mine">Are you sure you want to delete this client?</p>
            </div>
            <div class="modal-footer">
                <button type="button" @onclick='eventArgs => HideModal("exampleModalCenter")' class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick='eventArgs => { HideModal("exampleModalCenter"); ConfirmRemove(); }'>Remove</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    private ClientModel client;
    private ClientModel clientToRemove = new();

    private ClientModel editingClientModel;
    private string currentFirstName = "";
    private string editedFirstName = "";
    private string currentLastName = "";
    private string editedLastName = "";
    private string currentAddress = "";
    private string editedAddress = "";
    private string currentPhone = "";
    private string editedPhone = "";
    private string currentEmail = "";
    private string editedEmail = "";


    protected override async Task OnInitializedAsync()
    {
        client = await clientData.GeClientAsync(Id);
    }

    private IJSObjectReference module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == null)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/ClientDetails.razor.js");
        }
    }

    protected async void ShowModal(string elementId)
    {
        if (module != null)
        {
            await module.InvokeAsync<string>("showModal", elementId);
        }
        else
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/ClientDetails.razor.js");
            await module.InvokeAsync<string>("showModal", elementId);
        }
    }

    protected async void HideModal(string elementId)
    {
        if (module != null)
        {
            await module.InvokeAsync<string>("hideModal", elementId);
        }
        else
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/ClientDetails.razor.js");
            await module.InvokeAsync<string>("hideModal", elementId);
        }
    }

    private void ClientToRemoveUpdate(ClientModel client)
    {
        clientToRemove = client;
    }

    private void ConfirmRemove()
    {
        
        toastService.ShowWarning($"{clientToRemove.FirstName} {clientToRemove.LastName }was removed!");
        DeleteClient(clientToRemove);
    }

    private void EditName(ClientModel client)
    {
        editingClientModel = client;
        editedFirstName = client.FirstName;
        editedLastName = client.LastName;
        currentFirstName = client.Id;
        currentLastName = client.Id;

        currentAddress = "";
        currentPhone = "";
        currentEmail = "";
    }

    private void EditAddress(ClientModel client)
    {
        editingClientModel = client;
        editedAddress = client.ClientAddress;
        currentAddress = client.Id;

        currentFirstName = "";
        currentLastName = "";
        currentPhone = "";
        currentEmail = "";
    }

    private void EditPhoneNumber(ClientModel client)
    {
        editingClientModel = client;
        editedPhone = client.ClientPhoneNumber;
        currentPhone = client.Id;

        currentAddress = "";
        currentFirstName = "";
        currentLastName = "";
        currentEmail = "";
    }

    private void EditEmail(ClientModel client)
    {
        editingClientModel = client;
        editedEmail = client.ClientEMail;
        currentEmail = client.Id;

        currentAddress = "";
        currentFirstName = "";
        currentLastName = "";
        currentPhone = "";
    }

    private async Task SaveName(ClientModel client)
    {
        currentFirstName = String.Empty;
        currentLastName = String.Empty;
        client.FirstName = editedFirstName;
        client.LastName = editedLastName;
        await clientData.UpdateClient(client);
    }

    private async Task SaveAddress(ClientModel client)
    {
        currentAddress = String.Empty;
        client.ClientAddress = editedAddress;
        await clientData.UpdateClient(client);
    }

    private async Task SavePhoneNumber(ClientModel client)
    {
        currentPhone = String.Empty;
        client.ClientPhoneNumber = editedPhone;
        await clientData.UpdateClient(client);
    }

    private async Task SaveEmail(ClientModel client)
    {
        currentEmail = String.Empty;
        client.ClientEMail = editedEmail;
        await clientData.UpdateClient(client);
    }

    private void DeleteClient(ClientModel client)
    {
        clientData.DeleteClient(client);
        navManager.NavigateTo("/clients");
    }
}


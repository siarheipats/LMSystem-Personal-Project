@page "/addclienttoproject/{id}"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IMongoProjectData projectData
@inject IMongoClientData clientData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject IJSRuntime JsRuntime

<h1 class="page-heading text-uppercase mb-4">Add Client for @project.ProjectTitle:</h1>
<button @onclick="(() => ClosePage())">Close Page</button>
<br />
<div>
    <h4>Select Client To Add:</h4>
    <div class="description-and-search-bar">
        <input type="text" placeholder="Search For a Client"
               aria-label="Search box"
               @oninput="((txt) => OnSearchInput((string)txt.Value))" />
    </div>
    <div class="result">
        @if (clients is not null)
        {
            <Virtualize Items="@clients" Context="s" OverscanCount="10">
                <form class="result-card">
                    <fieldset>
                        <div>Name: @s.FirstName @s.LastName</div>
                        <div>Address: @s.ClientAddress</div>
                        <div>Phone: @s.ClientPhoneNumber</div>
                        <div>
                            <button class="new-object-button" @onclick="(() => AddClient(s))">Add Client</button>
                        </div>
                    </fieldset>
                </form>
            </Virtualize>
        }
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    private ProjectModel project = new();
    private List<ClientModel> clients = new();
    private string searchText = "";

    protected override async Task OnInitializedAsync()
    {
        project = await projectData.GetPorjectAsync(Id);
        clients = await clientData.GetClientsAsync();
    }

    private void ClosePage()
    {
        navManager.NavigateTo($"/project/{Id}");
    }

    private async Task AddClient(ClientModel client)
    {
        clients = new();
        project.ProjectClient = client;
        await projectData.UpdateProject(project);
        navManager.NavigateTo($"/project/{Id}");
    }

    private async Task LoadFilterState()
    {
        searchText = "";

    }

    private async Task FilterClients()
    {
        var output = await clientData.GetClientsAsync();
        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(s => s.FirstName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.LastName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ClientPhoneNumber.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ClientEMail.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ClientAddress.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        clients = output;

    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterClients();
    }
}


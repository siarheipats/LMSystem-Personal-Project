@page "/item/{id}"

@inject IMongoItemData itemData
@inject NavigationManager navManager
@inject IJSRuntime JS
@inject IToastService toastService

<h2 class="page-heading">Item Details:</h2>
<div class="element-details">
    @if (item is not null)
    {
        @if (currentEditingName == item.Id)
        {
            <EditForm class="edit-element-details" Model="@editedName" OnSubmit="(() => SaveName(item))">
                Name: <InputText @bind-Value="editedName" size="75" />
                <br />
                <button class="edit-element-button" type="submit">
                    <span class="oi oi-check"></span>
                </button>
                <button class="edit-element-button" @onclick="(() => currentEditingName = String.Empty)">
                    <span class="oi oi-x"></span>
                </button>
            </EditForm>
        }
        else
        {
            <div>
                Name: @item.ItemName <span class="oi oi-pencil" @onclick="(() => EditName(item))" />
            </div>
        }
        <br />
        @if (currentEditingDescription == item.Id)
        {
            <EditForm class="edit-element-details" Model="@editedDescription" OnSubmit="(() => SaveDescription(item))">
                Description: <br />
                <InputTextArea @bind-Value="editedDescription" rows="5" cols="75" />
                <br />
                <button class="edit-element-button" type="submit">
                    <span class="oi oi-check"></span>
                </button>
                <button class="edit-element-button" @onclick="(() => currentEditingDescription = String.Empty)">
                    <span class="oi oi-x"></span>
                </button>
            </EditForm>
        }
        else
        {
            <div>
                Description: <br /> @item.ItemDescription <span class="oi oi-pencil" @onclick="(() => EditDescription(item))" />
            </div>

        }
        <br />
        @if (currentEditingPrice == item.Id)
        {
            <EditForm class="edit-element-details" Model="@editedPrice" OnSubmit="(() => SavePrice(item))">
                Price: <InputText @bind-Value="editedPrice" size="75" />
                <br />
                <button class="edit-element-button" type="submit">
                    <span class="oi oi-check"></span>
                </button>
                <button class="edit-element-button" @onclick="(() => currentEditingPrice = String.Empty)">
                    <span class="oi oi-x"></span>
                </button>
            </EditForm>
        }
        else
        {
            <div>
                Price: @item.Price <span class="oi oi-pencil" @onclick="(() => EditPrice(item))" />
            </div>
        }
        <br />
        @if (currentQuantityInStock == item.Id)
        {
            <EditForm class="edit-element-details" Model="@editedQuantityInStock" OnSubmit="(() => SaveQuantityInStock(item))">
                Quantity In Stock: <InputNumber @bind-Value="editedQuantityInStock" size="75" />
                <br />
                <button class="edit-element-button" type="submit">
                    <span class="oi oi-check"></span>
                </button>
                <button class="edit-element-button" @onclick="(() => currentQuantityInStock = String.Empty)">
                    <span class="oi oi-x"></span>
                </button>
            </EditForm>
        }
        else
        {
            <div>
                Quantity in Stock: @item.QuantityInStock <span class="oi oi-pencil" @onclick="(() => EditQuantityInStock(item))" />
            </div>
        }

    }
    <br />
    <br />
    <div>
        <button class="btn btn-danger" ata-toggle="modal" data-target="#exampleModalCenter" @onclick='eventArgs => { ShowModal("exampleModalCenter"); ItemToRemoveUpdate(item); }'>Delete Item</button>
    </div>
</div>

<!-- Modal -->
<div class="modal fade show" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="display:none; background: 00000080;">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title-2" color: #282c34 id="exampleModalLongTitle">Warning</h5>
                <button @onclick='eventArgs => HideModal("exampleModalCenter")' type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p class="modal-mine">Are you sure you want to delete this item from the inventory?</p>
            </div>
            <div class="modal-footer">
                <button type="button" @onclick='eventArgs => HideModal("exampleModalCenter")' class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick='eventArgs => { HideModal("exampleModalCenter"); ConfirmRemove(); }'>Remove</button>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string Id { get; set; }
    private ItemModel item;
    private ItemModel itemToRemove = new();

    private ItemModel editingModel;
    private string currentEditingName = "";
    private string editedName = "";
    private string currentEditingDescription = "";
    private string editedDescription = "";
    private string currentEditingPrice = "";
    private string editedPrice = "";
    private string currentQuantityInStock = "";
    private int editedQuantityInStock = 0;

    protected override async Task OnInitializedAsync()
    {
        item = await itemData.GetItemAsync(Id);
    }

    private IJSObjectReference module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == null)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/ItemDetails.razor.js");
        }
    }

    protected async void ShowModal(string elementId)
    {
        if (module != null)
        {
            await module.InvokeAsync<string>("showModal", elementId);
        }
        else
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/ItemDetails.razor.js");
            await module.InvokeAsync<string>("showModal", elementId);
        }
    }

    private void ItemToRemoveUpdate(ItemModel item)
    {
        itemToRemove = item;
    }

    private void ConfirmRemove()
    {
        toastService.ShowWarning($"{itemToRemove.ItemName} was deleted from the inventory!");
        DeleteItem(itemToRemove);
    }

    protected async void HideModal(string elementId)
    {
        if (module != null)
        {
            await module.InvokeAsync<string>("hideModal", elementId);
        }
        else
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/ItemDetails.razor.js");
            await module.InvokeAsync<string>("hideModal", elementId);
        }
    }

    private void EditName(ItemModel item)
    {
        editingModel = item;
        editedName = item.ItemName;
        currentEditingName = item.Id;
        currentEditingDescription = "";
        currentEditingPrice = "";
        currentQuantityInStock = "";
    }

    private void EditDescription(ItemModel item)
    {
        editingModel = item;
        editedDescription = item.ItemDescription;
        currentEditingDescription = item.Id;
        currentEditingName = "";
        currentEditingPrice = "";
        currentQuantityInStock = "";
    }

    private void EditPrice(ItemModel item)
    {
        editingModel = item;
        editedPrice = item.Price;
        currentEditingDescription = "";
        currentEditingName = "";
        currentEditingPrice = item.Id;
        currentQuantityInStock = "";
    }

    private void EditQuantityInStock(ItemModel item)
    {
        editingModel = item;
        editedQuantityInStock = item.QuantityInStock;
        currentEditingDescription = "";
        currentEditingName = "";
        currentEditingPrice = "";
        currentQuantityInStock = item.Id;
    }

    private async Task SaveName(ItemModel item)
    {
        currentEditingName = String.Empty;
        item.ItemName = editedName;
        await itemData.UpdateItem(item);
    }

    private async Task SaveDescription(ItemModel item)
    {
        currentEditingDescription = String.Empty;
        item.ItemDescription = editedDescription;
        await itemData.UpdateItem(item);
    }

    private async Task SavePrice(ItemModel item)
    {
        currentEditingPrice = String.Empty;
        item.Price = editedPrice;
        await itemData.UpdateItem(item);
    }

    private async Task SaveQuantityInStock(ItemModel item)
    {
        currentQuantityInStock = "";
        item.QuantityInStock = editedQuantityInStock;
        await itemData.UpdateItem(item);
    }

    private void DeleteItem(ItemModel item)
    {
        itemData.DeleteItem(item);
        navManager.NavigateTo("/items");
    }
}


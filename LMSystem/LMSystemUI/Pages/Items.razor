@page "/items"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IMongoItemData itemData
@inject ProtectedSessionStorage sessionStorage
@inject NavigationManager navManager

<h3>All Items:</h3>

<div>
    Search:
<input type="text" placeholder="Search"
       aria-label="Search box"
       @oninput="((txt) => OnSearchInput((string)txt.Value))" />
</div>
<br />
<div>
    <button @onclick="CreateNewItem">New Item</button>
</div>
<br />
<div>
    <div>
        @if (items is not null)
        {
            <Virtualize Items="@items" Context="s" OverscanCount="10">
                <form>
                    <fieldset>
                        <div @onclick="(() => OpenItemDetails(s))">Name: @s.ItemName</div>
                        <div>Description: @s.ItemDescription</div>
                        <div>Price: $@s.Price/each</div>
                        @if(s.QuantityInStock > 0)
                {
                    <div>In Stock: @s.QuantityInStock</div>
                }
                        @if(s.QuantityInStock == 0)
                {
                    <div>Not available in the warehouse</div>
                }
                    </fieldset>
                </form>
                <br />
            </Virtualize>
        }
    </div>
</div>

@code {
    private List<ItemModel> items;
    private string searchText = "";

    protected async override Task OnInitializedAsync()
    {
        items = await itemData.GetItemsAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await LoadFilterState();
            await FilterItems();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        searchText = "";

    }

    private async Task FilterItems()
    {
        var output = await itemData.GetItemsAsync();
        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(s => s.ItemName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
            s.ItemDescription.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        items = output;

        await SaveFilterState();
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterItems();
    }

    private void OpenItemDetails(ItemModel item)
    {
        navManager.NavigateTo($"/item/{item.Id}");
    }

    private void CreateNewItem()
    {
        navManager.NavigateTo("/createitem");
    }
}


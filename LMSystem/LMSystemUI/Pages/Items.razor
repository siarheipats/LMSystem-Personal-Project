@page "/items"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IMongoItemData itemData
@inject ProtectedSessionStorage sessionStorage
@inject NavigationManager navManager

<h1 class="page-heading text-uppercase mb-4">Our Inventory:</h1>
<div class="description-and-search-bar">
    <input type="text" size="50" placeholder="Search Items In Our Inventory"
           aria-label="Search box"
           @oninput="((txt) => OnSearchInput((string)txt.Value))" />
    <div>
        <button class="btn btn-primary" @onclick="CreateNewItem">Create New Item</button>
    </div>
</div>
<div>
    <div class="result-card">
        @if (items is not null)
         {
            <div class="table">
            <table class="invoice-items-table-wide">
                <thead class="table-header">
                    <tr>
                        <th>Item Name</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Quantity In Stock</th>
                    </tr>
                </thead>
                <tbody>
                    <Virtualize Items="@items" Context="s" OverscanCount="10">
                        <tr>
                            <td><a class="card-link" @onclick="(() => OpenItemDetails(s))">@s.ItemName</a></td>
                            <td>@s.ItemDescription</td>
                            <td>$@s.Price</td>
                            @if (s.QuantityInStock > 0)
                            {
                                <td>@s.QuantityInStock</td>
                            }
                            @if (s.QuantityInStock == 0)
                            {
                                <td>Not available in the warehouse</td>
                            }
                        </tr>
                    </Virtualize>
                </tbody>
            </table>
            </div>
         }
    </div>
</div>

@code {
    private List<ItemModel> items;
    private string searchText = "";

    protected async override Task OnInitializedAsync()
    {
        items = await itemData.GetItemsAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await LoadFilterState();
            await FilterItems();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        searchText = "";

    }

    private async Task FilterItems()
    {
        var output = await itemData.GetItemsAsync();
        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(s => s.ItemName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
            s.ItemDescription.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        items = output;

        await SaveFilterState();
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterItems();
    }

    private void OpenItemDetails(ItemModel item)
    {
        navManager.NavigateTo($"/item/{item.Id}");
    }

    private void CreateNewItem()
    {
        navManager.NavigateTo("/createitem");
    }
}


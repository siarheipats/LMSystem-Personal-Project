@page "/"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IMongoProjectData projectData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject IMongoClientData clientData
@inject IMongoUserData userData

<h1 class="page-heading text-uppercase mb-4">Home</h1>
<div class="notification-bar">
    <h5>You have 0 notifications.</h5>
</div>
<div class="description-and-search-bar">
    <h2 class="page-description mb-2">Current Projects:</h2>
    <div>
        <input size="50" type="text" placeholder="Search Current Projects"
               aria-label="Search box"
               @oninput="((txt) => OnSearchInput((string)txt.Value))" />
    </div>
</div>

<div class="result">
    <div>
        @if (projects is not null)
        {
            <Virtualize Items="@projects" Context="s" OverscanCount="5">
                <form class="result-card">
                    <fieldset>
                        <div @onclick="(() => OpenDetails(s))">Title: <a class="card-link">@s.ProjectTitle</a></div>
                        <div @onclick="(() => OpenClientDetails(s.ProjectClient))">Client Name: <a class="card-link">@s.ProjectClient.FirstName @s.ProjectClient.LastName</a></div>
                        <div>Status: @s.ProjectStatus</div>
                    </fieldset>
                </form>
            </Virtualize>
        }
    </div>
</div>

@code {
    private List<ProjectModel> projects;
    bool isSortedByNew = true;
    private string searchText = "";

    protected async override Task OnInitializedAsync()
    {
        projects = await projectData.GetCurrentPorjectsAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await LoadFilterState();
            await FilterProjects();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task FilterProjects()
    {
        var output = await projectData.GetCurrentPorjectsAsync();

        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(s => s.ProjectDescription.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ProjectNotes.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ProjectClient.LastName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ProjectClient.FirstName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ProjectStatus.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(s => s.ProjectTitle).ToList();
        }

        projects = output;

        await SaveFilterState();
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterProjects();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterProjects();
    }

    private void OpenDetails(ProjectModel project)
    {
        navManager.NavigateTo($"/project/{project.Id}");
    }

    private void OpenClientDetails(ClientModel client)
    {
        navManager.NavigateTo($"Client/{client.Id}");
    }
}
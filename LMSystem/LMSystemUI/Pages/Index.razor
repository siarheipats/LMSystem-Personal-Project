@page "/"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IMongoProjectData projectData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject IMongoClientData clientData
@inject IMongoUserData userData

<h1>Projects:</h1>
<br />
<div>
    <button>New Project</button>
</div>
<br />
<div>
    <input type="text" placeholder="Search"
           aria-label="Search box"
           @oninput="((txt) => OnSearchInput((string)txt.Value))"/>
</div>
<br />
<div>
    <div>Order By:</div>
    <div>
        <button @onclick="(() => OrderByNew(true))">New</button>
        <button @onclick="(() => OrderByNew(false))">Alphabetical Order</button>
    </div>
</div>
<br />
<div>
    <div>
        @if(projects is not null)
            {
                <Virtualize Items="@projects" Context="s" OverscanCount="5">
                    <form>
                        <fieldset>
                            <div @onclick="(() => OpenDetails(s))">Title: @s.ProjectTitle</div>
                            <div @onclick="(() => OpenClientDetails(s.ProjectClient))">
                                Client Name: @s.ProjectClient.FirstName @s.ProjectClient.LastName</div>
                            <div>Status: @s.ProjectStatus</div>
                        </fieldset>
                    </form>
                    <br />
                </Virtualize>
            }
    </div>
</div>

@code {
    private List<ProjectModel> projects;
    private string selectedProjectStatus = "Current";
    bool isSortedByNew = true;
    private string searchText = "";

    protected async override Task OnInitializedAsync()
    {
        projects = await projectData.GetProjectsAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await LoadFilterState();
            await FilterProjects();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task FilterProjects()
    {
        var output = await projectData.GetProjectsAsync();

        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(s => s.ProjectDescription.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ProjectNotes.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ProjectClient.LastName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ProjectClient.FirstName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ProjectStatus.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(s => s.ProjectTitle).ToList();
        }

        projects = output;

        await SaveFilterState();
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterProjects();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterProjects();
    }

    private void OpenDetails(ProjectModel project)
    {
        navManager.NavigateTo($"/Details/{project.Id}");
    }

    private void OpenClientDetails(ClientModel client)
    {
        navManager.NavigateTo($"Client/{client.Id}");
    }
}
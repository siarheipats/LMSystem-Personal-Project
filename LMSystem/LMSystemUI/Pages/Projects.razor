@page "/projects"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IMongoProjectData projectData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h3>All Projects:</h3>
<div>
    Search: <input type="text" placeholder="Search"
                   aria-label="Search box"
                   @oninput="((txt) => OnSearchInput((string)txt.Value))" />
</div>
<br />
<div>
    <button>New Project</button>
</div>
<br />
<div>
    <div>
        @if (projects is not null)
        {
            <Virtualize Items="@projects" Context="s" OverscanCount="5">
                <form>
                    <fieldset>
                        <div @onclick="(() => OpenDetails(s))">Title: @s.ProjectTitle</div>
                        <div @onclick="(() => OpenClientDetails(s.ProjectClient))">
                            Client Name: @s.ProjectClient.FirstName @s.ProjectClient.LastName
                        </div>
                        <div>Status: @s.ProjectStatus</div>
                    </fieldset>
                </form>
                <br />
            </Virtualize>
        }
    </div>
</div>

@code {
    private List<ProjectModel> projects;
    private string searchText = "";

    protected async override Task OnInitializedAsync()
    {
        projects = await projectData.GetCurrentPorjectsAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await LoadFilterState();
            await FilterProjects();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

    }

    private async Task FilterProjects()
    {
        var output = await projectData.GetProjectsAsync();
        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(s => s.ProjectDescription.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ProjectNotes.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ProjectClient.LastName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ProjectClient.FirstName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.ProjectStatus.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }

        projects = output;

        await SaveFilterState();
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterProjects();
    }

    private void OpenDetails(ProjectModel project)
    {
        navManager.NavigateTo($"/project/{project.Id}");
    }

    private void OpenClientDetails(ClientModel client)
    {
        navManager.NavigateTo($"Client/{client.Id}");
    }
}


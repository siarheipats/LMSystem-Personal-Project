@page "/invoices"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IMongoInvoiceData invoiceData
@inject ProtectedSessionStorage sessionStorage
@inject NavigationManager navManager

<h1 class="page-heading text-uppercase mb-4">Invoices:</h1>

<div class="description-and-search-bar">
    <input type="text" size="50" placeholder="Search All Invoices"
           aria-label="Search box"
           @oninput="((txt) => OnSearchInput((string)txt.Value))" />
    <div>
        <button class="new-object-button" @onclick="CreateNewInvocie">Create New Invoice</button>
    </div>
</div>
<div class="result">
    <div>
        @if(invoices is not null)
         {
            <Virtualize Items="invoices" Context="s" OverscanCount="10">
                <form class="result-card">
                    <fieldset>
                        <div @onclick="(() => OpenInvoiceDetails(s))">Title: <a class="card-link">@s.InvoiceTitle</a></div>
                        <div>Invoice Number: @s.InvoiceNumber</div>
                        <div>Status: @s.InvoiceStatus</div>
                    </fieldset>
                </form>
            </Virtualize>
         }    
    </div>
</div>

@code {
    private List<InvoiceModel> invoices;
    private string searchText = "";

    protected async override Task OnInitializedAsync()
    {
        invoices = await invoiceData.GetAllInvoices();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            await LoadFilterState();
            await FilterInvoices();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        searchText = "";

    }

    private async Task FilterInvoices()
    {
        var output = await invoiceData.GetAllInvoices();
        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(s => s.InvoiceTitle.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
            s.InvoiceNumber.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        invoices = output;

        await SaveFilterState();
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterInvoices();
    }

    private void OpenInvoiceDetails(InvoiceModel invoice)
    {
        navManager.NavigateTo($"/invoice/{invoice.Id}");
    }

    private void CreateNewInvocie()
    {
        navManager.NavigateTo("/createinvoice");
    }
}


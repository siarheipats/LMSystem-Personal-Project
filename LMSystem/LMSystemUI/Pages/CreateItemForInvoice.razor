@page "/createitem/{id}"

@using LMSystemUI.Models

@inject IMongoItemData itemData
@inject IMongoInvoiceData invoiceData
@inject NavigationManager navManager
@inject IToastService toastService


<h3>New Item for @invoice.InvoiceTitle:</h3>
<div>
    <div>
        <div>
            <EditForm Model="item" OnValidSubmit="CreateNewItem">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <table class="invoice-items-table">
                    <tbody>
                        <tr>
                            <td>Item Name:</td>
                            <td><InputText id="item-name-text" @bind-Value="item.ItemName" /></td>
                        </tr>
                        <tr>
                            <td>Description:</td>
                            <td><InputTextArea id="item-description-text" rows="3" cols="21" @bind-Value="item.ItemDescription" /></td>
                        </tr>
                        <tr>
                            <td>Price:</td>
                            <td><InputText id="item-price-text" @bind-Value="item.Price" /></td>
                        </tr>
                        <tr>
                            <td>Quantity:</td>
                            <td><InputNumber id="item-quantity-text" @bind-Value="item.QuantityInStock" /></td>
                        </tr>
                        <tr>
                            <td>   </td>
                            <td><button class="btn btn-primary" type="submit">Create Item</button></td>
                        </tr>

                    </tbody>
                </table>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    private InvoiceModel invoice = new();
    private CreateItemModel item = new();

    protected override async Task OnInitializedAsync()
    {
        invoice = await invoiceData.GetInvoiceAsync(Id);
    }

    private async Task CreateNewItem()
    {
        toastService.ShowSuccess($"{item.ItemName} was added to inventory!");
        ItemModel s = new();
        s.ItemName = item.ItemName;
        s.ItemDescription = item.ItemDescription;
        s.Price = item.Price;
        s.QuantityInStock = item.QuantityInStock;
        invoice.Items.Add(s);
        await invoiceData.UpdateInvoice(invoice);
        await itemData.CreateItem(s);
        item = new();
        ClosePage();
    }

    private void ClosePage()
    {
        navManager.NavigateTo($"/invoice/{Id}");
    }
}

